
plugins { 
    id "org.springframework.boot" version "2.4.10"
    id "io.spring.dependency-management" version "1.0.11.RELEASE" 
    id "io.freefair.lombok" version "6.1.0"
    id "io.freefair.maven-publish-java" version "6.1.0"
    id "com.github.kt3k.coveralls" version "2.12.0" 
    id "org.owasp.dependencycheck" version "6.2.2"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'net.researchgate.release' version '2.8.1'
    id 'java'
    id 'jacoco'
}

jar {
    archiveBaseName = 'base-repo'
    archiveVersion = System.getenv('version')
}

repositories {
    mavenLocal() 
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
 
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

println "Building ${name} version: ${version}"

if (project.hasProperty('travis')) {
    println 'Using travis profile for building ' + project.getName()
    apply from: 'gradle/profile-travis.gradle'
} else if (project.hasProperty('release') || project.hasProperty('clean-release')) {
    println 'Using release profile for building ' + project.getName()
    apply from: 'gradle/profile-release.gradle'   
}

ext {
  set('javersVersion', "6.2.3")
  set('springDocVersion', "1.5.6")
}

dependencies {
   // boot starter
    implementation "org.springframework.boot:spring-boot-starter-validation"    
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

     
    implementation "org.springframework:spring-messaging:5.3.9"
    implementation "org.springframework.security:spring-security-web:5.5.2"
    implementation "org.springframework.security:spring-security-config:5.5.2"
    
    // cloud support
    implementation "org.springframework.cloud:spring-cloud-starter-config:3.0.4"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.0.3"

    // springdoc
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-data-rest:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${springDocVersion}"

    implementation "edu.kit.datamanager:repo-core:0.9.0-SNAPSHOT"
    implementation "edu.kit.datamanager:service-base:0.3.0-SNAPSHOT"

    implementation "org.javers:javers-core:${javersVersion}"
    implementation "com.github.fge:json-patch:1.9"
    
    implementation "javax.xml.bind:jaxb-api:2.3.0"

    testImplementation "com.h2database:h2:1.4.200" 
    //testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework:spring-test"
    testImplementation "org.springframework.security:spring-security-test"
   
    //Java 11 Support 
    testImplementation "org.mockito:mockito-core:2.18.0"
    testImplementation "org.powermock:powermock-module-junit4:2.0.0-beta.5"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.0-beta.5"

    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE"
}

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
    launchScript()
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

