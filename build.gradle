plugins { 
    id "org.springframework.boot" version "2.4.10"
    id "io.spring.dependency-management" version "1.0.11.RELEASE" 
    id "io.freefair.lombok" version "6.1.0"
    id "io.freefair.maven-publish-java" version "6.1.0"
    id "com.github.kt3k.coveralls" version "2.12.0" 
    id "org.owasp.dependencycheck" version "6.2.2"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'net.researchgate.release' version '2.8.1'
    id 'java'
    id 'jacoco'
}

jar {
    archiveBaseName = 'base-repo'
    // version is defined in file 'gradle.properties'
    archiveVersion = System.getenv('version')
}

repositories {
    mavenLocal() 
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
 
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

ext {
    set('javersVersion', "6.2.3")
    set('springDocVersion', "1.5.6")

    // directory for generated code snippets during tests
    snippetsDir = file("build/generated-snippets")
}

println "Running gradle version: $gradle.gradleVersion"
println "Building ${name} version: ${version}"
println "JDK version: ${JavaVersion.current()}"

if (System.getProperty('profile') == 'minimal') {
    println 'Using minimal profile for building ' + project.getName()
    apply from: 'gradle/profile-minimal.gradle'   
} else {
    println 'Using default profile executing all tests for building ' + project.getName()
    apply from: 'gradle/profile-complete.gradle'
}

dependencies {
   // boot starter
    implementation "org.springframework.boot:spring-boot-starter-validation"    
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

     
    implementation "org.springframework:spring-messaging:5.3.9"
    implementation "org.springframework.security:spring-security-web:5.5.2"
    implementation "org.springframework.security:spring-security-config:5.5.2"
    
    // cloud support
    implementation "org.springframework.cloud:spring-cloud-starter-config:3.0.4"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.0.3"

    // springdoc
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-data-rest:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${springDocVersion}"

    implementation "edu.kit.datamanager:repo-core:0.9.1"
    implementation "edu.kit.datamanager:service-base:0.3.0"

    implementation "org.javers:javers-core:${javersVersion}"
    implementation "com.github.fge:json-patch:1.9"
    
    implementation "javax.xml.bind:jaxb-api:2.3.0"

    runtimeOnly    "org.apache.httpcomponents:httpclient:4.5.13"

    testImplementation "com.h2database:h2:1.4.200" 
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:2.0.5.RELEASE"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework:spring-test"
    testImplementation "org.springframework.security:spring-security-test"
   
    //Java 11 Support 
    testImplementation "org.mockito:mockito-core:3.12.0"
    testImplementation "org.powermock:powermock-module-junit4:2.0.9"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.9"
    testImplementation "junit:junit:4.13.2"
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

import java.text.SimpleDateFormat

tasks.register('testForSnippetsDir') {
  doFirst {
    println 'snippetsDir exists: ' + snippetsDir.exists()
    if (!snippetsDir.exists()) {
      println 'Create snippets dir...'
      println 'WARNING: Don\'t skip tests for building production ready jar file!'
      snippetsDir.mkdirs()
    }
  }
} 

asciidoctor {
  dependsOn testForSnippetsDir
    attributes "snippets": snippetsDir,
               "version":  jar.archiveVersion,
               "date":     new SimpleDateFormat("yyyy-MM-dd").format(new Date())
    inputs.dir snippetsDir
    dependsOn test  
    sourceDir "docs/"
    outputDir "build/docs/html5"
}

tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}

bootJar {
    println 'Create bootable jar...'
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
    launchScript()
}
