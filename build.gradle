buildscript {
    repositories { 
        mavenLocal()
        jcenter()
        mavenCentral()
    }
	 repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.2.RELEASE")
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2'
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
}

plugins { 
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id "io.spring.dependency-management" version "1.0.8.RELEASE" 
    id "com.github.kt3k.coveralls" version "2.8.1" 
    id "org.owasp.dependencycheck" version "3.1.2"
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'jacoco'


jar {
    baseName = 'base-repo'
    version = System.getenv('version')
}

repositories {
    mavenLocal() 
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
 
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

lombok {
    version = '1.18.10'
    sha256 = ""
}

println "Building ${name} version: ${version}"

if (project.hasProperty('travis')) {
    println 'Using travis profile for building ' + project.getName()
    apply from: 'gradle/profile-travis.gradle'
} else if (project.hasProperty('release') || project.hasProperty('clean-release')) {
    println 'Using release profile for building ' + project.getName()
    apply from: 'gradle/profile-release.gradle'   
}

ext {
  set('javersVersion', "6.2.3")
  set('springDocVersion', "1.5.6")
}

dependencies {
   // boot starter
    implementation "org.springframework.boot:spring-boot-starter-validation"    
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

     
    implementation "org.springframework:spring-messaging:5.3.9"
    implementation "org.springframework.security:spring-security-web:5.5.2"
    implementation "org.springframework.security:spring-security-config:5.5.2"
    
    // cloud support
    implementation "org.springframework.cloud:spring-cloud-starter-config:3.0.4"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.0.3"

    implementation 'com.github.fge:json-patch:1.9'

    
    
    // springdoc
    implementation "org.springdoc:springdoc-openapi-ui:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-data-rest:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${springDocVersion}"

    implementation "edu.kit.datamanager:repo-core:0.9.0-SNAPSHOT"
    implementation "edu.kit.datamanager:service-base:0.3.0-SNAPSHOT"

    implementation "org.javers:javers-core:${javersVersion}"
//    implementation("org.springframework.boot:spring-boot-starter-data-rest")
//
//    implementation("edu.kit.datamanager:service-base:0.2.0")
//    implementation("edu.kit.datamanager:generic-message-consumer:0.2.0")
//    api("org.springdoc:springdoc-openapi-data-rest:1.2.31")
//    implementation("org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3")
//    implementation("org.springframework.cloud:spring-cloud-starter:2.2.3.RELEASE")
//    
//    implementation("org.apache.commons:commons-text:1.8")
//    implementation("commons-configuration:commons-configuration:1.10")
//
//    implementation("com.monitorjbl:spring-json-view:1.0.1")
//    implementation("org.postgresql:postgresql:42.2.1")
//    implementation("com.h2database:h2:1.4.194")
//    implementation("org.apache.tika:tika-core:1.18") 
//    implementation ("org.javers:javers-core:5.8.7")
//
//    implementation("de.codecentric:spring-boot-admin-starter-client:2.1.6")
//    //Java 11 Support 
//    implementation 'javax.xml.bind:jaxb-api:2.3.1'
//    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
//    implementation 'com.sun.xml.bind:jaxb-impl:2.3.0.1'
//    implementation('javax.activation:activation:1.1.1')
//    implementation('org.javassist:javassist:3.23.1-GA')
    
    compile('javax.xml.bind:jaxb-api:2.3.0')

    testImplementation("com.h2database:h2:1.4.194") 
    //testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework:spring-test")
    testImplementation("org.springframework.security:spring-security-test")
   
    //Java 11 Support 
    testImplementation("org.mockito:mockito-core:2.18.0")
    testImplementation("org.powermock:powermock-module-junit4:2.0.0-beta.5")
    testImplementation("org.powermock:powermock-api-mockito2:2.0.0-beta.5")

    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc:2.0.4.RELEASE')
    testImplementation('org.asciidoctor:asciidoctor-gradle-plugin:1.5.9.2')
    asciidoctor('org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.4.RELEASE')
    asciidoctor('com.github.allati.asciidoctor.monotree:asciidoctor-extension-monotree:0.0.1')
}

bootJar {
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
    launchScript()
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

